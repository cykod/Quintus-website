extends layout

block content
  script(type='quintus',id='game-header').
    <!DOCTYPE html>
    <html>
      <head>
        <title>Platformer Example</title>
        <meta name="viewport" content="width=device-width, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0"/>
        <script src='/quintus/lib/quintus.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_sprites.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_scenes.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_input.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_2d.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_touch.js'>SCRIPTEND
        <script src='/quintus/lib/quintus_ui.js'>SCRIPTEND
        <style> body { padding:0px; margin:0px; } </style>
      </head>
      <body>
  script(type='quintus',id='game-footer').
    </body>
    </html>
  section#content
    article#demo-game
      h1 Demo Game
      p a platfomer in ~80 lines of code, you can edit the code on the left. Click to focus, arrow keys to move.
      #example-game
        .button-container 
          a.button#rungame(href='#demo')
            | Run This Code
        .left
          textarea#example.
            &nbsp;

            var Q = Quintus()
                    .include("Sprites, Scenes, Input, 2D, Touch, UI")
                    .setup({ maximize: true })
                    .controls().touch()

            Q.Sprite.extend("Player",{
              init: function(p) {
                this._super(p, { sheet: "player", x: 410, y: 90 });
                this.add('2d, platformerControls');

                this.on("hit.sprite",function(collision) {
                  if(collision.obj.isA("Tower")) {
                    Q.stageScene("endGame",1, { label: "You Won!" }); 
                    this.destroy();
                  }
                });
              }
            });

            Q.Sprite.extend("Tower", {
              init: function(p) {
                this._super(p, { sheet: 'tower' });
              }
            });

            Q.Sprite.extend("Enemy",{
              init: function(p) {
                this._super(p, { sheet: 'enemy', vx: 100 });
                this.add('2d, aiBounce');

                this.on("bump.left,bump.right,bump.bottom",function(collision) {
                  if(collision.obj.isA("Player")) { 
                    Q.stageScene("endGame",1, { label: "You Died" }); 
                    collision.obj.destroy();
                  }
                });

                this.on("bump.top",function(collision) {
                  if(collision.obj.isA("Player")) { 
                    this.destroy();
                    collision.obj.p.vy = -300;
                  }
                });
              }
            });

            Q.scene("level1",function(stage) {
              stage.collisionLayer(new Q.TileLayer({ dataAsset: 'level.json', sheet: 'tiles' }));
              var player = stage.insert(new Q.Player());

              stage.add("viewport").follow(player);

              stage.insert(new Q.Enemy({ x: 700, y: 0 }));
              stage.insert(new Q.Enemy({ x: 800, y: 0 }));

              stage.insert(new Q.Tower({ x: 180, y: 50 }));
            });

            Q.scene('endGame',function(stage) {
              var box = stage.insert(new Q.UI.Container({
                x: Q.width/2, y: Q.height/2, fill: "rgba(0,0,0,0.5)"
              }));

              var button = box.insert(new Q.UI.Button({ x: 0, y: 0, fill: "#CCCCCC",
                                                       label: "Play Again" }))         
              var label = box.insert(new Q.UI.Text({x:10, y: -10 - button.p.h, 
                                                    label: stage.options.label }));
              button.on("click",function() {
                Q.clearStages();
                Q.stageScene('level1');
              });
              box.fit(20);
            });

            Q.load("sprites.png, sprites.json, level.json, tiles.png", function() {
              Q.sheet("tiles","tiles.png", { tilew: 32, tileh: 32 });
              Q.compileSheets("sprites.png","sprites.json");
              Q.stageScene("level1");
            });

        .right
          iframe(src='about:blank;',id='demo')
        .clear
      p A breakdown of the example is below.
    article.example
      h1 
        | Getting Started
        span.target
        span.lightning
      p Create an HTML file, pull in the Quintus library and setup the engine. Quintus has a modular engine that lets you pull in just the modules you need and can run in multiple instances on a page. 
      pre
        code.html.
          &lt;html&gt;
            &lt;head&gt;
              &lt;!-- Pull the engine from the Quintus CDN or load it locally --&gt;
              &lt;script src='http://cdn.html5quintus.com/v0.0.2/quintus-all.min.js'&gt;&lt;/script&gt;
             &lt;/head&gt;
             &lt;body&gt;
               &lt;script&gt;

                // Now set up your game (most games will load a separate .js file)
                var Q = Quintus()                          // Create a new engine instance
                        .include("Sprites, Scenes, Input, 2D, Touch, UI") // Load any needed modules
                        .controls()                        // Add in default controls (keyboard, buttons)
                        .touch()                           // Add in touch support (for the UI)
                        .setup();                          // Add a canvas element onto the page

                /*
                  ... Actual game code goes here ... 
                 */
              &lt;/script&gt;
             &lt;/body&gt;
          &lt;/html&gt;
    article.example
      h1 
        | Create some sprites
        span.target
        span.lightning
      p Quintus supports an event-based, hybrid Object-Oriented and Component-based approach, allowing for both a standard inheritance model with support for reusable components.
      pre
        code.javascript.

          // You can create a sub-class by extending the Q.Sprite class to create Q.Player
          Q.Sprite.extend("Player",{

            // the init constructor is called on creation
            init: function(p) {

              // You can call the parent's constructor with this._super(..)
              this._super(p, {
                sheet: "player",  // Setting a sprite sheet sets sprite width and height
                x: 410,           // You can also set additional properties that can
                y: 90            // be overridden on object creation
              });

              // Add in pre-made components to get up and running quickly
              this.add('2d, platformerControls');

              // Write event handlers to respond hook into behaviors.
              // hit.sprite is called everytime the player collides with a sprite
              this.on("hit.sprite",function(collision) {
                // Check the collision, if it's the Tower, you win!
                if(collision.obj.isA("Tower")) {
                  // Stage the endGame scene above the current stage
                  Q.stageScene("endGame",1, { label: "You Won!" }); 
                  // Remove the player to prevent them from moving
                  this.destroy();
                }
              });
            }
          });

          // Sprites can be simple, the Tower sprite just sets a custom sprite sheet
          Q.Sprite.extend("Tower", {
            init: function(p) {
              this._super(p, { sheet: 'tower' });
            }
          });

          // Create the Enemy class to add in some baddies
          Q.Sprite.extend("Enemy",{
            init: function(p) {
              this._super(p, { sheet: 'enemy', vx: 100 });

              // Enemies use the Bounce AI to change direction 
              // whenver they run into something.
              this.add('2d, aiBounce');

              // Listen for a sprite collision, if it's the player,
              // end the game unless the enemy is hit on top
              this.on("bump.left,bump.right,bump.bottom",function(collision) {
                if(collision.obj.isA("Player")) { 
                  Q.stageScene("endGame",1, { label: "You Died" }); 
                  collision.obj.destroy();
                }
              });

              // If the enemy gets hit on the top, destroy it
              // and give the user a "hop"
              this.on("bump.top",function(collision) {
                if(collision.obj.isA("Player")) { 
                  this.destroy();
                  collision.obj.p.vy = -300;
                }
              });
            }
          });
    article.example
      h1 
        | Set the scene
        span.whirlwind
        span.rocket
      p Quintus let's you easily create reusable scenes that can be swapped in and out by loading them onto stages. Stages stack on top of each other.
      pre
        code.javascript.
          // Create a new scene called level 1
          Q.scene("level1",function(stage) {

            // Add in a tile layer, and make it the collision layer
            stage.collisionLayer(new Q.TileLayer({
                                       dataAsset: 'level.json',
                                       sheet:     'tiles' }));

            // Create the player and add him to the stage
            var player = stage.insert(new Q.Player());

            // Give the stage a moveable viewport and tell it
            // to follow the player.
            stage.add("viewport").follow(player);

            // Add in a couple of enemies
            stage.insert(new Q.Enemy({ x: 700, y: 0 }));
            stage.insert(new Q.Enemy({ x: 800, y: 0 }));

            // Finally add in the tower goal
            stage.insert(new Q.Tower({ x: 180, y: 50 }));
          });

          // To display a game over / game won popup box, 
          // create a endGame scene that takes in a `label` option
          // to control the displayed message.
          Q.scene('endGame',function(stage) {
            var container = stage.insert(new Q.UI.Container({
              x: Q.width/2, y: Q.height/2, fill: "rgba(0,0,0,0.5)"
            }));

            var button = container.insert(new Q.UI.Button({ x: 0, y: 0, fill: "#CCCCCC",
                                                            label: "Play Again" }))         
            var label = container.insert(new Q.UI.Text({x:10, y: -10 - button.p.h, 
                                                             label: stage.options.label }));
            // When the button is clicked, clear all the stages
            // and restart the game.
            button.on("click",function() {
              Q.clearStages();
              Q.stageScene('level1');
            });

            // Expand the container to visibily fit it's contents
            container.fit(20);
          });
    article.example
      h1 
        | Load and launch
        span.whirlwind
        span.rocket
      p Quintus features easy asset loading, sprite sheet generation. Launch your game by staging a scene.
      pre
        code.javascript.
          // Q.load can be called at any time to load additional assets
          // assets that are already loaded will be skipped
          Q.load("sprites.png, sprites.json, level.json, tiles.png",
            // The callback will be triggered when everything is loaded
            function() {
              // Sprites sheets can be created manually
              Q.sheet("tiles","tiles.png", { tilew: 32, tileh: 32 });

              // Or from a .json asset that defines sprite locations
              Q.compileSheets("sprites.png","sprites.json");

              // Finally, call stageScene to run the game
              Q.stageScene("level1");
            });

